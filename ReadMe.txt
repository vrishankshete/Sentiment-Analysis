/*
*	Sentiment Analysis on Hindi-English Code Mixed Data
*	By: 1) Vrishank Shete
*		2) GaganDeep Singh Chhabra
*		3) Lokesh Mittal
*/


****IMPORTANT NOTE****
Hindi PoS tagger must be installed on the machine before running the code.
Link: http://ltrc.iiit.ac.in/showfile.php?filename=downloads/shallow_parser.php
**********************



How to run?

1) Run "bash englishPoSTagExtract.sh" to extract English PoS tags count in folder "POS_Tags_Counts/"
2) Run "bash hindiPoSTagExtractor.sh" to extract Hindi PoS tags count in folder "POS_Tags_Counts/"
3) Run "bash runCrawlFB.sh" to extract comments on posts from public pages and store in "runCrawlFB.sh/"
4) Run "bash runPreProcess.sh" to generate preprocessed files from original data in folder "TaggedComments".



***IMPORTANT***

5) "bash runClassifierForClient.sh" will run the main project once all above commands are done. The folder already contains outputs of all the above queries. So this command can directly be executed. This will run the classifier codes and give final accuracy for test data. Output is stored in "Output/" folder.

6) "bash run.sh "Input_comment_to_be_tagged" " will run only the test code for comment passed as argument 1. It will use the train models generated already. It will directly display the output. This script is used to run the code on web server.

***************


Data folder contains all the tagged comments.


The directory structure in "SentimentAnalysis/" is organized as below.

1)  Classifier/ -> LibLinear and LibSVM classifiers

2)  Code/ directory -> 
		a) Classifier/ -> Java codes required for generating feature vectors as input to SVM.
		b) FBCrawler/ -> Java codes for crawling and saving facebook public pages using access tokens.
		c) PoSTagger/ -> Java code for getting PoS tags counts.
		d) PreProcess/ -> Java codes for Normalization, PMI Dictionary generation, Negation Handling
3)  Dictionaries/ -> All the Hindi as well as English dictionaries including SentiWordNet

4)  runCrawlFB.sh -> Raw data from facebook

5)  Input_SVM_Data -> Feature vectors test and train

6)  Model -> Trained model from SVM ./train output. Also the feature vector indices file.

7)  Output -> Final output file generated by SVM.

8)  POSTagger -> ARK PoS Tagger (English) and python codes to get English PoS counts

9)  POS_Tags_Counts -> PoS tags counts for each comment in train and test files.

10) TaggedComments -> Input to the project. Contains train and test data in 3 forms - 
					   Original data, Negation Handled, Normalized.
					   
11) Temp -> Temporary directory. Used to store intermediate value.


***IMPORTANT***

If the full folder is hosted on a web server e.g. apache tomcat, the index.php can be used to run the code.

***************
